{"version":3,"file":"bootstrap-validate-laravel.js","names":["document","addEventListener","querySelectorAll","forEach","form","event","preventDefault","formElement","target","closest","action","getAttribute","method","data","FormData","submitButton","querySelector","originalButtonText","innerText","setFormInputsReadOnly","setSubmitButtonLoading","fetch","headers","getHeaders","body","then","handleResponse","handleError","resetSubmitButton","response","status","json","redirect","window","location","href","showAlert","message","error","errors","highlightValidInputs","Object","entries","_ref","_ref2","_slicedToArray","key","messages","input","concat","validateInput","statusText","invalidFeedback","feedbackElement","getOrCreateFeedbackElement","classList","add","remove","innerHTML","join","value","isReadOnly","readOnly","button","originalText","textContent","type","alert","createElement","className","role","prepend","parent","parentElement","feedback","appendChild"],"sources":["../src/bootstrap-validate-laravel.js"],"sourcesContent":["/**\n * Inicializa a validação e o tratamento de envio de formulário quando o conteúdo \n * do DOM estiver completamente carregado.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n    document.querySelectorAll('form:not(.form-ignore)').forEach(form => {\n        form.addEventListener('submit', event => {\n            event.preventDefault();\n\n            const formElement = event.target.closest('form');\n            const action = formElement.getAttribute('action');\n            const method = formElement.getAttribute('method');\n            const data = new FormData(formElement);\n            const submitButton = formElement.querySelector('button[type=submit]');\n            const originalButtonText = submitButton.innerText;\n\n            setFormInputsReadOnly(formElement, true);\n            setSubmitButtonLoading(submitButton);\n\n            fetch(action, {\n                method: method,\n                headers: getHeaders(formElement),\n                body: data,\n            })\n            .then(handleResponse)\n            .catch(handleError)\n            .finally(() => {\n                setFormInputsReadOnly(formElement, false);\n                resetSubmitButton(submitButton, originalButtonText);\n            });\n\n            /**\n             * Trata a resposta do servidor.\n             * @param {Response} response - O objeto de resposta da solicitação fetch.\n             * @throws Lançará um erro se o status da resposta for diferente de 200.\n             */\n            function handleResponse(response) {\n                if (response.status !== 200) {\n                    throw response;\n                }\n                return response.json().then(data => {\n                    if (data.redirect) {\n                        window.location.href = data.redirect;\n                    } else {\n                        showAlert(formElement, 'success', data.message);\n                    }\n                });\n            }\n\n            /**\n             * Trata erros da solicitação fetch.\n             * @param {Error} error - O objeto de erro da solicitação fetch.\n             */\n            function handleError(error) {\n                if (error.json && error.status > 400 && error.status < 500) {\n                    if (error.status === 422) {\n                        error.json().then(data => {\n                            if (!data.errors) return;\n                            highlightValidInputs(formElement);\n                            Object.entries(data.errors).forEach(([key, messages]) => {\n                                const input = formElement.querySelector(`input[name=${key}]`);\n                                validateInput(input, messages);\n                            });\n                        });\n                        return;\n                    }\n                    showAlert(formElement, 'warning', error.message);\n                } else {\n                    showAlert(formElement, 'danger', `${error.status} - ${error.statusText}`);\n                }\n            }\n\n            /**\n             * Valida o input e exibe feedback de erro.\n             * @param {HTMLElement} input - O elemento de input a validar.\n             * @param {Array} invalidFeedback - A lista de mensagens de feedback a exibir.\n             */\n            function validateInput(input, invalidFeedback) {\n                const feedbackElement = getOrCreateFeedbackElement(input);\n                input.classList.add('is-invalid');\n                input.classList.remove('is-valid');\n                feedbackElement.innerHTML = `<ul><li>${invalidFeedback.join('</li><li>')}</li></ul>`;\n                input.addEventListener('input', () => {\n                    input.classList.remove('is-invalid');\n                    feedbackElement.innerHTML = '';\n                });\n            }\n\n            /**\n             * Obtem os cabeçalhos para a solicitação fetch.\n             * @param {HTMLElement} form - O elemento de formulário a obter os cabeçalhos.\n             * @returns {Object} - O objeto de cabeçalhos para a solicitação fetch.\n             */\n            function getHeaders(form) {\n                return {\n                    'X-CSRF-TOKEN': form.querySelector('input[name=_token]').value,\n                    'X-Requested-With': 'XMLHttpRequest',\n                    'Accept': 'application/json',\n                };\n            }\n\n            /**\n             * Define o estado de apenas leitura para todos os inputs do formulário.\n             * @param {HTMLElement} form - O elemento de formulário contendo inputs.\n             * @param {boolean} isReadOnly - O estado de apenas leitura a ser definido.\n             */\n            function setFormInputsReadOnly(form, isReadOnly) {\n                form.querySelectorAll('input').forEach(input => {\n                    input.readOnly = isReadOnly;\n                });\n            }\n\n            /**\n             * Define o botão de envio para um estado de carregamento.\n             * @param {HTMLElement} button - O botão de envio.\n             */\n            function setSubmitButtonLoading(button) {\n                button.innerHTML = '<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Enviando...';\n            }\n\n            /**\n             * Restaura o botão de envio para seu estado original.\n             * @param {HTMLElement} button - O botão de envio.\n             * @param {string} originalText - O texto original do botão.\n             */\n            function resetSubmitButton(button, originalText) {\n                button.textContent = originalText;\n            }\n\n            /**\n             * Exibe uma mensagem de alerta dentro do formulário.\n             * @param {HTMLElement} form - O elemento de formulário a exibir o alerta.\n             * @param {string} type - O tipo de alerta ('success', 'warning', 'danger').\n             * @param {string} message - A mensagem a exibir no alerta.\n             */\n            function showAlert(form, type, message) {\n                const alert = document.createElement('div');\n                alert.className = `alert alert-${type}`;\n                alert.role = 'alert';\n                alert.textContent = message;\n                form.prepend(alert);\n            }\n\n            /**\n             * Destaca os inputs válidos no formulário.\n             * @param {HTMLElement} form - O elemento de formulário contendo inputs.\n             */\n            function highlightValidInputs(form) {\n                form.querySelectorAll('input[type=text]').forEach(input => {\n                    input.classList.add('is-valid');\n                });\n            }\n\n            /**\n             * Obtem ou cria um elemento de feedback para o input.\n             * @param {HTMLElement} input - O elemento de input a obter o feedback.\n             * @returns {HTMLElement} - O elemento de feedback.\n             */\n            function getOrCreateFeedbackElement(input) {\n                const parent = input.parentElement;\n                let feedback = parent.querySelector('.invalid-feedback');\n                if (!feedback) {\n                    feedback = document.createElement('div');\n                    feedback.classList.add('invalid-feedback');\n                    parent.appendChild(feedback);\n                }\n                return feedback;\n            }\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}